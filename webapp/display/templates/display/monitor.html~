{% load staticfiles %}
<html>
    <head>
		<title>SlowControl</title>
		<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
		<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css">
		<link rel="stylesheet" href="{% static 'css/styles.css' %}">
		<link rel="stylesheet" href="{% static 'css/monitor.css' %}">
		<link rel="stylesheet" href="{% static 'css/detail.css' %}">
		<meta charset='utf-8'>
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<script src="http://code.jquery.com/jquery-latest.min.js" type="text/javascript"></script>

        <!-- dygraph for ploting data and SavePlot.js for saving the plot -->
	    <script src="//cdnjs.cloudflare.com/ajax/libs/dygraph/1.1.0/dygraph-combined.js"></script>
	    <script src="/static/java_scripts/SavePlot.js"></script>  <!-- saving plot to png -->

    </head>
    <div id="headerBar"></div>

    <body>

    <!-- Title in header -->
		<header>
			<h1>SlowControl</h1>
			<h2>monitor</h2>
		</header>

	<!------ menu bar on left side ----->
		<div id='cssmenu'>
			<!-- main menu -->
			<ul>
			   <li><a href='/display/'><span>Home</span></a></li>
			   <li class='active has-sub'><a href='/display/'><span>Controllers</span></a>
				  <ul>
					{% if Config_list %}
						{% for config in Config_list %}
							<li class='last'><a href="/display/{{ config.controller }}/"><span>{{ config.controller }}</span></a></li>
						{% endfor %}
					{% else %}
						<p>No controllers are available.</p>
					{% endif %}
				  </ul>
			   </li>
			   <li><a href='/display/monitor/'><span>Monitor</span></a></li>
			</ul>

			<!-- create some space between main menu -->
			<div class="box2" ></div>


			<ul>
			<!-- selection for the six plots -->
			   <li class='active has-sub'><a><span>Plot 1</span></a>
				  <ul>
					{% if Config_list %}
						{% for config in Config_list %}
							<li class='active has-sub'><a><span>{{ config.controller }}</span></a>
							<ul>
								{% for data in config.description %}
								<li class='last'><a onclick="DrawChart('{{config.controller}}/{{data}}',1)">{{data}}</a></li>
								{% endfor %}
							</ul>
							</li>
						{% endfor %}
					{% else %}
						<p>No controllers are available.</p>
					{% endif %}
				  </ul>
			   </li>
			   <li class='active has-sub'><a><span>Plot 2</span></a>
				  <ul>
					{% if Config_list %}
						{% for config in Config_list %}
							<li class='active has-sub'><a><span>{{ config.controller }}</span></a>
							<ul>
								{% for data in config.description %}
								 <li class='last'><a onclick="DrawChart('{{ config.controller }}/{{data}}',2)">{{data}}</a></li>
								{% endfor %}
							</ul>
							</li>
						{% endfor %}
					{% else %}
						<p>No controllers are available.</p>
					{% endif %}
				  </ul>
			   </li>
			   <li class='active has-sub'><a><span>Plot 3</span></a>
				  <ul>
					{% if Config_list %}
						{% for config in Config_list %}
							<li class='active has-sub'><a><span>{{ config.controller }}</span></a>
							<ul>
								{% for data in config.description %}
								 <li class='last'><a onclick="DrawChart('{{ config.controller }}/{{data}}',3)">{{data}}</a></li>
								{% endfor %}
							</ul>
							</li>
						{% endfor %}
					{% else %}
						<p>No controllers are available.</p>
					{% endif %}
				  </ul>
			   </li>
			   <li class='active has-sub'><a><span>Plot 4</span></a>
				  <ul>
					{% if Config_list %}
						{% for config in Config_list %}
							<li class='active has-sub'><a><span>{{ config.controller }}</span></a>
							<ul>
								{% for data in config.description %}
								 <li class='last'><a onclick="DrawChart('{{ config.controller }}/{{data}}',4)">{{data}}</a></li>
								{% endfor %}
							</ul>
							</li>
						{% endfor %}
					{% else %}
						<p>No controllers are available.</p>
					{% endif %}
				  </ul>
			   </li>
			   <li class='active has-sub'><a><span>Plot 5</span></a>
				  <ul>
					{% if Config_list %}
						{% for config in Config_list %}
							<li class='active has-sub'><a><span>{{ config.controller }}</span></a>
							<ul>
								{% for data in config.description %}
								 <li class='last'><a onclick="DrawChart('{{ config.controller }}/{{data}}',5)">{{data}}</a></li>
								{% endfor %}
							</ul>
							</li>
						{% endfor %}
					{% else %}
						<p>No controllers are available.</p>
					{% endif %}
				  </ul>
			   </li>
			   <li class='active has-sub'><a><span>Plot 6</span></a>
				  <ul>
					{% if Config_list %}
						{% for config in Config_list %}
							<li class='active has-sub'><a><span>{{ config.controller }}</span></a>
							<ul>
								{% for data in config.description %}
								 <li class='last'><a onclick="DrawChart('{{ config.controller }}/{{data}}',6)">{{data}}</a></li>
								{% endfor %}
							</ul>
							</li>
						{% endfor %}
					{% else %}
						<p>No controllers are available.</p>
					{% endif %}
				  </ul>
			   </li>

				<!-- time range selection -->
			   <li class='active has-sub'><a><span>time range</span></a>
					<ul>
						<li class='last'><a onclick="SetTimeRange(1);">Last hour</a></li>
						<li class='last'><a onclick="SetTimeRange(2)">Last 5 hours</span></a></li>
						<li class='last'><a onclick="SetTimeRange(3)">Last Day</a></li>
						<li class='last'><a onclick="SetTimeRange(4)">Last Week</a></li>
					</ul>
			   </li>
		</ul>
	
		<!-- some space between plot options/selection and save button -->
		<div class="box3" ></div>

		<!-- Save the plots as png -->
		<ul>
		   <li class='active has-sub'><a><span>Save as png</span></a>
			<ul>
				<li class='last'><a onclick="if(typeof(chart1)=='undefined') alert('selected plot is empty');SavePlot(chart1)">Plot1</a></li>
				<li class='last'><a onclick="if(typeof(chart2)=='undefined') alert('selected plot is empty');SavePlot(chart2)">Plot2</span></a></li>
				<li class='last'><a onclick="if(typeof(chart3)=='undefined') alert('selected plot is empty');SavePlot(chart3)">Plot3</a></li>
				<li class='last'><a onclick="if(typeof(chart4)=='undefined') alert('selected plot is empty');SavePlot(chart4)">Plot4</a></li>
				<li class='last'><a onclick="if(typeof(chart5)=='undefined') alert('selected plot is empty');SavePlot(chart5)">Plot5</a></li>
				<li class='last'><a onclick="if(typeof(chart6)=='undefined') alert('selected plot is empty');SavePlot(chart6)">Plot6</a></li>
			</ul>
		   </li>
		</ul>

		<!-- Save the plots as scv file -->
		<ul>
		   <li class='active has-sub'><a><span>Save as csv</span></a>
			<ul>
				<li class='last'><a onclick="if(typeof(chart1)=='undefined') alert('selected plot is empty');SavePlotCSV(1)">Plot1</a></li>
				<li class='last'><a onclick="if(typeof(chart2)=='undefined') alert('selected plot is empty');SavePlotCSV(2)">Plot2</span></a></li>
				<li class='last'><a onclick="if(typeof(chart3)=='undefined') alert('selected plot is empty');SavePlotCSV(3)">Plot3</a></li>
				<li class='last'><a onclick="if(typeof(chart4)=='undefined') alert('selected plot is empty');SavePlotCSV(4)">Plot4</a></li>
				<li class='last'><a onclick="if(typeof(chart5)=='undefined') alert('selected plot is empty');SavePlotCSV(5)">Plot5</a></li>
				<li class='last'><a onclick="if(typeof(chart6)=='undefined') alert('selected plot is empty');SavePlotCSV(6)">Plot6</a></li>
			</ul>
		   </li>
		</ul>

		</div>

        <!-- prepare container for plot --> 
		<section>
			<div id="box1" class="box"></div>
			<div id="box2" class="box"></div>
			<div id="box3" class="box"></div>
			<div id="box4" class="box"></div>
			<div id="box5" class="box"></div>
			<div id="box6" class="box"></div>

{{Config_list.iseries.warning_high.0}}

		</section> 

    </body>


<script type="text/javascript">
// time range: 1=Last hour, 2=Last 5 hours, 3=last day, 4=last week
var time_range = 1;

// restore previous plots
var linklist = {{PlotLinks|safe}};
DrawChart(linklist[0],1);
DrawChart(linklist[1],2);
DrawChart(linklist[2],3);
DrawChart(linklist[3],4);
DrawChart(linklist[4],5);
DrawChart(linklist[5],6);

//draw the charts
// $.getJSON takes two arguments, a URL that points to the view and a callback function. 
//The callback is executed only if data is transferred from the URL
function DrawChart(link,chart_number){
	$.getJSON(link + '/' + time_range + '/' + chart_number,function(data){

		if(data.length==1)alert("Can't plot empty data set in plot " + chart_number);
		console.log(data.length);

		//prepare data for dygraph
		var dateJ = new Array();
		var dateError = new Array();
		var counter = 0;
		var counter2 = 0;

		console.log(data);


		for(var i = 0; i < data.length-1; i++){
			dateJ[i] = [new Date(data[i][0]), data[i][1] ];
			/*
			if(data[i][2]==0 || data[i][2]==-2){
				dateJ[counter] = [new Date(data[i][0]), data[i][1] ];
				counter++;
			}
			if(data[i][2]!=0 && data[i][2]!=-2){
				dateError[counter2] = [new Date(data[i][0]), data[i][1] ];
				counter2++;
			}
			*/
		}
		//last entries are warning levels
		var warning_low = data[data.length-1][0];
		var warning_high = data[data.length-1][1];
		


		//define options for dygraph
		var options = {
			legend: 'always',
			title: link,
			showRoller: false,
			rollPeriod: 1,
			labels: [ "date", "data" ],
			drawPoints: true,
			color: 'black',
			strokeWidth: 0,
			pointSize: 2,
			//draw "allowed" region in green
			underlayCallback: function(canvas, area, g) {
				var bottom_left = g.toDomCoords(new Date(data[0][0]),warning_low);
				var top_right = g.toDomCoords(new Date(data[data.length-2][0]),warning_high);
			    var left = bottom_left[0];
			    var right = top_right[0];
				var bottom = bottom_left[1];
			    var top = top_right[1];
			    canvas.fillStyle = "rgba(191, 242, 174, 1.0)";
			    canvas.fillRect(area.x, bottom, area.w, top-bottom);
		}};


		//console.log(dateJ);

		if(chart_number==1){
			linklist[0] = link; //update link in linklist (used for loadData() )
			chart1 = new Dygraph(document.getElementById('box1'), dateJ, options);
		}
		if(chart_number==2){
			linklist[1] = link; //update link in linklist (used for loadData() )
			chart2 = new Dygraph(document.getElementById('box2'), dateJ, options);
		}
		if(chart_number==3){
			linklist[2] = link; //update link in linklist (used for loadData() )
			chart3 = new Dygraph(document.getElementById('box3'), dateJ, options);
		}
		if(chart_number==4){
			linklist[3] = link; //update link in linklist (used for loadData() )
			chart4 = new Dygraph(document.getElementById('box4'), dateJ, options);
		}
		if(chart_number==5){
			linklist[4] = link; //update link in linklist (used for loadData() )
			chart5 = new Dygraph(document.getElementById('box5'), dateJ, options);
		}
		if(chart_number==6){
			linklist[5] = link; //update link in linklist (used for loadData() )
			chart6 = new Dygraph(document.getElementById('box6'), dateJ, options);
		}
	}); //end getJSON
}


// function to update the plots (if they exist)
// $.getJSON takes two arguments, a URL that points to the view and a callback function. The callback
// is executed only if data is transferred from the URL
function loadData(){
	//update plot1 only if it exists
	if(typeof(chart1) != 'undefined'){
		$.getJSON(linklist[0] + '/' + time_range + '/1',function(data){
		if(data.length==1)alert("Can't plot empty data set");
			//prepare data for dygraph
			// dygraph wants time to be defined as "Date"
			var dateJ = new Array();
			for(var i = 0; i < data.length-1; i++){//lats entry is status of data point
				dateJ[i] = [new Date(data[i][0]), data[i][1] ];
			}
			console.log(linklist[0]);

			// Update the chart with the data
				chart1.updateOptions({"labels": [ "date", "data" ],"file": dateJ});
		}); //end getJSON
	}

	//update plot2 only if it exists
	if(typeof(chart2) != 'undefined'){
		$.getJSON(linklist[1] + '/' + time_range + '/2',function(data){
    	if(data.length==1)alert("Can't plot empty data set");
			//prepare data for dygraph
			// dygraph wants time to be defined as "Date"
			var dateJ = new Array();
			for(var i = 0; i < data.length-1; i++){//lats entry is status of data point
				dateJ[i] = [new Date(data[i][0]), data[i][1] ];
			}

			// Update the chart with the data
				chart2.updateOptions({"labels": [ "date", "data" ],"file": dateJ});
		}); //end getJSON
	}

	//update plot3 only if it exists
	if(typeof(chart3) != 'undefined'){
		$.getJSON(linklist[2] + '/' + time_range + '/3',function(data){
    	if(data.length==1)alert("Can't plot empty data set");
			//prepare data for dygraph
			// dygraph wants time to be defined as "Date"
			var dateJ = new Array();
			for(var i = 0; i < data.length-1; i++){//lats entry is status of data point
				dateJ[i] = [new Date(data[i][0]), data[i][1] ];
			}

			// Update the chart with the data
				chart3.updateOptions({"labels": [ "date", "data" ],"file": dateJ});
		}); //end getJSON
	}

	//update plot4 only if it exists
	if(typeof(chart4) != 'undefined'){
		$.getJSON(linklist[3] + '/' + time_range + '/4',function(data){
    	if(data.length==1)alert("Can't plot empty data set");
			//prepare data for dygraph
			// dygraph wants time to be defined as "Date"
			var dateJ = new Array();
			for(var i = 0; i < data.length-1; i++){//lats entry is status of data point
				dateJ[i] = [new Date(data[i][0]), data[i][1] ];
			}

			// Update the chart with the data
				chart4.updateOptions({"labels": [ "date", "data" ],"file": dateJ});
		}); //end getJSON
	}
	//update plot5 only if it exists
	if(typeof(chart5) != 'undefined'){
		$.getJSON(linklist[4] + '/' + time_range + '/5',function(data){
    	if(data.length==1)alert("Can't plot empty data set");
			//prepare data for dygraph
			// dygraph wants time to be defined as "Date"
			var dateJ = new Array();
			for(var i = 0; i < data.length-1; i++){//lats entry is status of data point
				dateJ[i] = [new Date(data[i][0]), data[i][1] ];
			}

			// Update the chart with the data
				chart5.updateOptions({"labels": [ "date", "data" ],"file": dateJ});
		}); //end getJSON
	}
	//update plot6 only if it exists
	if(typeof(chart6) != 'undefined'){
		$.getJSON(linklist[5] + '/' + time_range + '/6',function(data){
    	if(data.length==1)alert("Can't plot empty data set");
			//prepare data for dygraph
			// dygraph wants time to be defined as "Date"
			var dateJ = new Array();
			for(var i = 0; i < data.length-1; i++){//lats entry is status of data point
				dateJ[i] = [new Date(data[i][0]), data[i][1] ];
			}
			//console.log(dateJ);
			// Update the chart with the data
				chart6.updateOptions({"labels": [ "date", "data" ],"file": dateJ});
		}); //end getJSON
	}
} //end loadData 


// change the time range and force the existing plots to update
function SetTimeRange(range){
	//change time range
	time_range = range;
	//update the plots
	loadData();
}

// save the plots as png (defined in 'SavePlots.js')
function SavePlot(graph){
      var imgExport = document.createElement('imgExport');
      Dygraph.Export.asPNG(graph,imgExport);
      window.location.href = imgExport.src.replace('image/png','image/octet-stream');
}

// save the plots as csv file
function SavePlotCSV(graph){
	$.getJSON(linklist[graph-1] + '/' + time_range + '/' + graph,function(data){
		//prepare data for dygraph
		var dateJ = new Array();
		for(var i = 0; i < data.length; i++){
			dateJ[i] = [data[i][0], data[i][1] ];
		}
		//console.log(dateJ);
    var csvString = dateJ.join("%0A");
    var a         = document.createElement('a');
    a.href        = 'data:attachment/csv,' + csvString;
    a.target      = '_blank';
    a.download    = 'myFile.csv';
    document.body.appendChild(a);
    a.click();

	}); //end getJSON
}

// This is an online oscilliscope so if we want it to constantly update we put a timeout callback to call the the loadData() function again
function UpdatePlots(){
//	loadData();
	setTimeout(UpdatePlots,10000);
}

// start updating when window loads
window.onload = UpdatePlots();

</script>



</html>
